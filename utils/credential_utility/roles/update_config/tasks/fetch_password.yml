# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Fetch "{{ password }}" if empty # noqa name[template]
  when:
    - vars[password] is defined
    - (vars[password] | length == 0)
    - password != 'docker_password' or (vars['docker_username'] | length != 0)
    - password is not search('switch')
      or 'switch' in password and composable_roles_output.switch_status
  block:
    - name: Fetch credential rule for "{{ password }}" # noqa name[template]
      fetch_credential_rule:
        credential_field: "{{ password }}"
        module_utils_path: "{{ module_utils_path }}"
      register: credential_rule

    - name: Prompt user for "{{ password }}" # noqa name[template]
      ansible.builtin.pause:
        prompt: "[{{ password }}] {{ lookup('vars', type.key ~ '_input') }} {{ credential_rule.msg }} Enter value"
        echo: false
      no_log: true
      register: password_input

    - name: Validate mandatory password not empty
      ansible.builtin.fail:
        msg: "{{ mandatory_password_fail_msg }}"
      when:
        - mandatory_credentials_status
        - password_input.user_input | length == 0

    - name: Validate input credential - "{{ password }}" # noqa name[template]
      validate_credentials:
        credential_field: "{{ password }}"
        credential_input: "{{ password_input.user_input }}"
        module_utils_path: "{{ module_utils_path }}"
      when: password_input.user_input | length != 0

    - name: Prompt user to confirm "{{ password }}" # noqa name[template]
      ansible.builtin.pause:
        prompt: "Confirm [{{ type.key }}] - {{ password }}"
        echo: false
      no_log: true
      register: confirm_password
      when: password_input.user_input | length != 0

    - name: Ensure passwords match
      ansible.builtin.fail:
        msg: "{{ password_match_fail_msg }}"
      when:
        - password_input.user_input | length != 0
        - password_input.user_input != confirm_password.user_input

    - name: Update vars file with entered password
      ansible.builtin.lineinfile:
        path: "{{ omnia_credential_file }}"
        regexp: '^{{ password }}:'
        line: "{{ password }}: \"{{ password_input.user_input }}\""
      no_log: true
      when: password_input.user_input | length != 0

  rescue:
    - name: Invalid Password provided
      ansible.builtin.include_tasks: encrypt_credentials_file.yml

    - name: Failed to credentials with entered password
      ansible.builtin.fail:
        msg: "{{ password_fail_msg }}"
